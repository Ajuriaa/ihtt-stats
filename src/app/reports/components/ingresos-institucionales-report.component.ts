import { Component, OnInit } from '@angular/core';
import moment from 'moment';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatIconModule } from '@angular/material/icon';\nimport { DashboardQueries } from '../../admin/services';\nimport { ReportesPDFService } from '../services/reportes-pdf.service';\nimport { ReporteParametros, IngresosInstitucionalData, FuenteIngresoData, KPIData } from '../interfaces';\nimport { LoadingComponent } from '../../shared/loading/loading.component';\n\n@Component({\n  selector: 'app-ingresos-institucionales-report',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatNativeDateModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    LoadingComponent\n  ],\n  template: `\n    <div class=\"ingresos-institucionales-container\">\n      <mat-card class=\"filter-card\">\n        <mat-card-header>\n          <mat-card-title>Reporte de Ingresos Institucionales</mat-card-title>\n          <mat-card-subtitle>Análisis financiero detallado con comparación presupuestal y KPIs</mat-card-subtitle>\n        </mat-card-header>\n        \n        <mat-card-content>\n          <div class=\"filters-section\">\n            <h3>Parámetros del Reporte</h3>\n            \n            <div class=\"filters-grid\">\n              <!-- Filtro de fechas -->\n              <div class=\"date-filters\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Fecha Inicio</mat-label>\n                  <input \n                    matInput \n                    [matDatepicker]=\"pickerInicio\" \n                    [(ngModel)]=\"filtros.fechaInicio\"\n                    (dateChange)=\"onFechaInicioChange($event.value)\">\n                  <mat-datepicker-toggle matSuffix [for]=\"pickerInicio\"></mat-datepicker-toggle>\n                  <mat-datepicker #pickerInicio></mat-datepicker>\n                </mat-form-field>\n                \n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Fecha Fin</mat-label>\n                  <input \n                    matInput \n                    [matDatepicker]=\"pickerFin\" \n                    [(ngModel)]=\"filtros.fechaFin\"\n                    (dateChange)=\"onFechaFinChange($event.value)\">\n                  <mat-datepicker-toggle matSuffix [for]=\"pickerFin\"></mat-datepicker-toggle>\n                  <mat-datepicker #pickerFin></mat-datepicker>\n                </mat-form-field>\n              </div>\n            </div>\n            \n            <!-- Botones de acción -->\n            <div class=\"action-buttons\">\n              <button mat-raised-button color=\"primary\" (click)=\"cargarDatos()\" [disabled]=\"cargando\">\n                <mat-icon>refresh</mat-icon>\n                Actualizar Datos\n              </button>\n              \n              <button \n                mat-raised-button \n                color=\"accent\" \n                (click)=\"generarReportePDF()\"\n                [disabled]=\"cargando || !datosDisponibles\">\n                <mat-icon>picture_as_pdf</mat-icon>\n                Generar Reporte PDF\n              </button>\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Vista previa de datos -->\n      <mat-card class=\"preview-card\" *ngIf=\"!cargando && datosIngresos\">\n        <mat-card-header>\n          <mat-card-title>Vista Previa Financiera</mat-card-title>\n          <mat-card-subtitle>Resumen ejecutivo de ingresos institucionales</mat-card-subtitle>\n        </mat-card-header>\n        \n        <mat-card-content>\n          <div class=\"preview-grid\">\n            <!-- Resumen ejecutivo -->\n            <div class=\"preview-section\">\n              <h4>Resumen Ejecutivo</h4>\n              <div class=\"executive-summary\">\n                <div class=\"summary-card\">\n                  <mat-icon class=\"summary-icon\">account_balance</mat-icon>\n                  <div class=\"summary-content\">\n                    <h5>Presupuesto Total</h5>\n                    <span class=\"amount\">{{ formatCurrency(datosIngresos.presupuestoTotal) }}</span>\n                  </div>\n                </div>\n                \n                <div class=\"summary-card\">\n                  <mat-icon class=\"summary-icon success\">trending_up</mat-icon>\n                  <div class=\"summary-content\">\n                    <h5>Ingresos Reales</h5>\n                    <span class=\"amount\">{{ formatCurrency(datosIngresos.ingresosRealesTotal) }}</span>\n                  </div>\n                </div>\n                \n                <div class=\"summary-card\">\n                  <mat-icon class=\"summary-icon\" [class.success]=\"datosIngresos.porcentajeCumplimientoTotal >= 100\" [class.warning]=\"datosIngresos.porcentajeCumplimientoTotal < 100\">\n                    {{ datosIngresos.porcentajeCumplimientoTotal >= 100 ? 'check_circle' : 'warning' }}\n                  </mat-icon>\n                  <div class=\"summary-content\">\n                    <h5>% Cumplimiento</h5>\n                    <span class=\"percentage\" [class.success]=\"datosIngresos.porcentajeCumplimientoTotal >= 100\" [class.warning]=\"datosIngresos.porcentajeCumplimientoTotal < 100\">\n                      {{ datosIngresos.porcentajeCumplimientoTotal.toFixed(2) }}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Fuentes de ingreso -->\n            <div class=\"preview-section\">\n              <h4>Ingresos por Fuente</h4>\n              <div class=\"income-sources\">\n                <div *ngFor=\"let fuente of datosIngresos.fuentesIngreso\" class=\"income-item\">\n                  <div class=\"income-header\">\n                    <span class=\"income-name\">{{ fuente.nombre }}</span>\n                    <span class=\"income-percentage\" [class.success]=\"fuente.porcentajeCumplimiento >= 100\" [class.warning]=\"fuente.porcentajeCumplimiento < 100\">\n                      {{ fuente.porcentajeCumplimiento.toFixed(1) }}%\n                    </span>\n                  </div>\n                  <div class=\"income-amounts\">\n                    <div class=\"amount-row\">\n                      <span class=\"amount-label\">Real:</span>\n                      <span class=\"amount-value\">{{ formatCurrency(fuente.ingresosReales) }}</span>\n                    </div>\n                    <div class=\"amount-row\">\n                      <span class=\"amount-label\">Proyectado:</span>\n                      <span class=\"amount-value projected\">{{ formatCurrency(fuente.ingresosProyectados) }}</span>\n                    </div>\n                  </div>\n                  <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" [style.width.%]=\"Math.min(fuente.porcentajeCumplimiento, 100)\" [class.success]=\"fuente.porcentajeCumplimiento >= 100\" [class.warning]=\"fuente.porcentajeCumplimiento < 100\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <!-- KPIs por fuente -->\n            <div class=\"preview-section\">\n              <h4>Indicadores Clave de Rendimiento (KPIs)</h4>\n              <div class=\"kpis-grid\">\n                <div *ngFor=\"let kpi of datosIngresos.kpisPorFuente\" class=\"kpi-card\" [class.success]=\"kpi.estado === 'CUMPLIDO'\" [class.warning]=\"kpi.estado === 'ADVERTENCIA'\" [class.critical]=\"kpi.estado === 'CRÍTICO'\">\n                  <div class=\"kpi-header\">\n                    <mat-icon>{{ getKPIIcon(kpi.estado) }}</mat-icon>\n                    <span class=\"kpi-source\">{{ kpi.fuente }}</span>\n                  </div>\n                  <div class=\"kpi-metrics\">\n                    <div class=\"metric\">\n                      <span class=\"metric-label\">Objetivo:</span>\n                      <span class=\"metric-value\">{{ formatCurrency(kpi.objetivo) }}</span>\n                    </div>\n                    <div class=\"metric\">\n                      <span class=\"metric-label\">Real:</span>\n                      <span class=\"metric-value\">{{ formatCurrency(kpi.real) }}</span>\n                    </div>\n                    <div class=\"metric\">\n                      <span class=\"metric-label\">Cumplimiento:</span>\n                      <span class=\"metric-percentage\">{{ kpi.porcentajeCumplimiento.toFixed(1) }}%</span>\n                    </div>\n                  </div>\n                  <div class=\"kpi-status\">\n                    <span class=\"status-badge\">{{ kpi.estado }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Loading state -->\n      <div *ngIf=\"cargando\" class=\"loading-section\">\n        <app-loading></app-loading>\n        <p>Cargando datos financieros...</p>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .ingresos-institucionales-container {\n      padding: 20px;\n      display: flex;\n      flex-direction: column;\n      gap: 20px;\n      max-width: 1400px;\n      margin: 0 auto;\n    }\n\n    .filter-card, .preview-card {\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n      border-radius: 8px;\n    }\n\n    .filters-section {\n      padding: 16px 0;\n    }\n\n    .filters-section h3 {\n      margin-bottom: 16px;\n      color: #333;\n      font-weight: 500;\n    }\n\n    .filters-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n\n    .date-filters {\n      display: flex;\n      gap: 16px;\n      grid-column: 1 / -1;\n    }\n\n    .date-filters mat-form-field {\n      flex: 1;\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n\n    .action-buttons button {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n\n    .preview-grid {\n      display: grid;\n      gap: 24px;\n    }\n\n    .preview-section h4 {\n      margin: 0 0 16px 0;\n      color: #333;\n      font-weight: 500;\n      border-bottom: 2px solid #e0e0e0;\n      padding-bottom: 8px;\n    }\n\n    .executive-summary {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n    }\n\n    .summary-card {\n      display: flex;\n      align-items: center;\n      gap: 16px;\n      padding: 20px;\n      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n      border-radius: 12px;\n      border-left: 4px solid #2196F3;\n    }\n\n    .summary-icon {\n      font-size: 32px;\n      color: #2196F3;\n    }\n\n    .summary-icon.success {\n      color: #4CAF50;\n    }\n\n    .summary-icon.warning {\n      color: #FF9800;\n    }\n\n    .summary-content h5 {\n      margin: 0 0 4px 0;\n      font-size: 0.9rem;\n      color: #666;\n      font-weight: 500;\n    }\n\n    .amount {\n      font-size: 1.5rem;\n      font-weight: 700;\n      color: #333;\n    }\n\n    .percentage {\n      font-size: 1.5rem;\n      font-weight: 700;\n    }\n\n    .percentage.success {\n      color: #4CAF50;\n    }\n\n    .percentage.warning {\n      color: #FF9800;\n    }\n\n    .income-sources {\n      display: grid;\n      gap: 16px;\n    }\n\n    .income-item {\n      padding: 16px;\n      border: 1px solid #e0e0e0;\n      border-radius: 8px;\n      background-color: #fafafa;\n    }\n\n    .income-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 12px;\n    }\n\n    .income-name {\n      font-weight: 600;\n      color: #333;\n      font-size: 1.1rem;\n    }\n\n    .income-percentage {\n      font-weight: 600;\n      padding: 4px 8px;\n      border-radius: 12px;\n      font-size: 0.9rem;\n    }\n\n    .income-percentage.success {\n      background-color: #e8f5e8;\n      color: #2e7d32;\n    }\n\n    .income-percentage.warning {\n      background-color: #fff8e1;\n      color: #f57c00;\n    }\n\n    .income-amounts {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 8px;\n      margin-bottom: 12px;\n    }\n\n    .amount-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .amount-label {\n      font-size: 0.9rem;\n      color: #666;\n    }\n\n    .amount-value {\n      font-weight: 600;\n      color: #333;\n    }\n\n    .amount-value.projected {\n      color: #666;\n      font-style: italic;\n    }\n\n    .progress-bar {\n      height: 6px;\n      background-color: #e0e0e0;\n      border-radius: 3px;\n      overflow: hidden;\n    }\n\n    .progress-fill {\n      height: 100%;\n      border-radius: 3px;\n      transition: width 0.3s ease;\n    }\n\n    .progress-fill.success {\n      background-color: #4CAF50;\n    }\n\n    .progress-fill.warning {\n      background-color: #FF9800;\n    }\n\n    .kpis-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n      gap: 16px;\n    }\n\n    .kpi-card {\n      padding: 16px;\n      border-radius: 8px;\n      border: 1px solid #e0e0e0;\n      background-color: #fafafa;\n    }\n\n    .kpi-card.success {\n      border-left: 4px solid #4CAF50;\n      background-color: #f8fff8;\n    }\n\n    .kpi-card.warning {\n      border-left: 4px solid #FF9800;\n      background-color: #fffdf8;\n    }\n\n    .kpi-card.critical {\n      border-left: 4px solid #F44336;\n      background-color: #fff8f8;\n    }\n\n    .kpi-header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 12px;\n    }\n\n    .kpi-header mat-icon {\n      font-size: 20px;\n    }\n\n    .kpi-source {\n      font-weight: 600;\n      color: #333;\n    }\n\n    .kpi-metrics {\n      display: grid;\n      gap: 8px;\n      margin-bottom: 12px;\n    }\n\n    .metric {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .metric-label {\n      font-size: 0.9rem;\n      color: #666;\n    }\n\n    .metric-value, .metric-percentage {\n      font-weight: 600;\n      color: #333;\n    }\n\n    .kpi-status {\n      text-align: center;\n    }\n\n    .status-badge {\n      padding: 4px 12px;\n      border-radius: 12px;\n      font-size: 0.8rem;\n      font-weight: 600;\n      text-transform: uppercase;\n    }\n\n    .kpi-card.success .status-badge {\n      background-color: #4CAF50;\n      color: white;\n    }\n\n    .kpi-card.warning .status-badge {\n      background-color: #FF9800;\n      color: white;\n    }\n\n    .kpi-card.critical .status-badge {\n      background-color: #F44336;\n      color: white;\n    }\n\n    .loading-section {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      padding: 40px;\n      text-align: center;\n    }\n\n    .loading-section p {\n      margin-top: 16px;\n      color: #666;\n    }\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    @media (max-width: 768px) {\n      .ingresos-institucionales-container {\n        padding: 16px;\n      }\n      \n      .filters-grid {\n        grid-template-columns: 1fr;\n      }\n      \n      .date-filters {\n        flex-direction: column;\n      }\n      \n      .executive-summary {\n        grid-template-columns: 1fr;\n      }\n      \n      .income-amounts {\n        grid-template-columns: 1fr;\n      }\n      \n      .kpis-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})\nexport class IngresosInstitucionalesReportComponent implements OnInit {\n  cargando = false;\n  datosIngresos: IngresosInstitucionalData | null = null;\n  datosDisponibles = false;\n  Math = Math; // Para usar Math.min en el template\n  \n  // Filtros\n  filtros: ReporteParametros = {\n    fechaInicio: '',\n    fechaFin: ''\n  };\n\n  constructor(\n    private dashboardQueries: DashboardQueries,\n    private reportesPDFService: ReportesPDFService\n  ) {}\n\n  ngOnInit(): void {\n    this.cargarDatos();\n  }\n\n  cargarDatos(): void {\n    this.cargando = true;\n    const parametros = this.construirParametros();\n    \n    // Simular carga de datos financieros\n    setTimeout(() => {\n      this.generarDatosMock();\n      this.cargando = false;\n    }, 2000);\n  }\n\n  private construirParametros(): any {\n    const params: any = {};\n    \n    if (this.filtros.fechaInicio) {\n      params.startDate = this.filtros.fechaInicio;\n    }\n    if (this.filtros.fechaFin) {\n      params.endDate = this.filtros.fechaFin;\n    }\n    \n    return params;\n  }\n\n  private generarDatosMock(): void {\n    this.datosIngresos = {\n      fuentesIngreso: [\n        {\n          nombre: 'Certificados',\n          ingresosReales: 750000,\n          ingresosProyectados: 800000,\n          porcentajeCumplimiento: 93.75\n        },\n        {\n          nombre: 'Permisos de Operación',\n          ingresosReales: 450000,\n          ingresosProyectados: 400000,\n          porcentajeCumplimiento: 112.5\n        },\n        {\n          nombre: 'Multas y Sanciones',\n          ingresosReales: 320000,\n          ingresosProyectados: 350000,\n          porcentajeCumplimiento: 91.43\n        },\n        {\n          nombre: 'Otros Ingresos',\n          ingresosReales: 125000,\n          ingresosProyectados: 100000,\n          porcentajeCumplimiento: 125.0\n        }\n      ],\n      presupuestoTotal: 1650000,\n      ingresosRealesTotal: 1645000,\n      porcentajeCumplimientoTotal: 99.7,\n      kpisPorFuente: [\n        {\n          fuente: 'Certificados',\n          objetivo: 800000,\n          real: 750000,\n          porcentajeCumplimiento: 93.75,\n          estado: 'ADVERTENCIA'\n        },\n        {\n          fuente: 'Permisos',\n          objetivo: 400000,\n          real: 450000,\n          porcentajeCumplimiento: 112.5,\n          estado: 'CUMPLIDO'\n        },\n        {\n          fuente: 'Multas',\n          objetivo: 350000,\n          real: 320000,\n          porcentajeCumplimiento: 91.43,\n          estado: 'ADVERTENCIA'\n        },\n        {\n          fuente: 'Otros',\n          objetivo: 100000,\n          real: 125000,\n          porcentajeCumplimiento: 125.0,\n          estado: 'CUMPLIDO'\n        }\n      ]\n    };\n    this.datosDisponibles = true;\n  }\n\n  generarReportePDF(): void {\n    if (!this.datosIngresos) {\n      alert('No hay datos disponibles para generar el reporte');\n      return;\n    }\n\n    this.reportesPDFService.generarReporteIngresosInstitucionales(\n      this.datosIngresos,\n      this.filtros\n    );\n  }\n\n  onFechaInicioChange(fecha: string): void {\n    this.filtros.fechaInicio = fecha;\n  }\n\n  onFechaFinChange(fecha: string): void {\n    this.filtros.fechaFin = fecha;\n  }\n\n  formatCurrency(amount: number): string {\n    return `L. ${amount.toLocaleString('es-HN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  }\n\n  getKPIIcon(estado: string): string {\n    switch (estado) {\n      case 'CUMPLIDO': return 'check_circle';\n      case 'ADVERTENCIA': return 'warning';\n      case 'CRÍTICO': return 'error';\n      default: return 'info';\n    }\n  }\n}"